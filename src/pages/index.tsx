import Head from 'next/head'
import Image from 'next/image'
import { Inter } from 'next/font/google'
import styles from '@/styles/Home.module.css'
import React, { useEffect, useState } from "react";
import { ethers } from "ethers";

const inter = Inter({ subsets: ['latin'] })

import abi from "./utils/ZombieFactory.json"

declare var window: any

interface Zombie {
  headChoice: number;
  eyeChoice: number;
  skinColorChoice: number;
  shirtChoice: number;
  clothesColorChoice: number;
  zombieName: string;
  zombieDescription: string;
}

const Home = () => {
  const [currentAccount, setCurrentAccount] = useState("");
  const [currentZombie, setZombie] = useState<Zombie>({
    headChoice: 0,
    eyeChoice: 0,
    skinColorChoice: 0,
    shirtChoice: 0,
    clothesColorChoice: 0,
    zombieName: "",
    zombieDescription: ""
  });

  const contractAddress = "0xb19ad02b7548EE3d5726F0eBeD6855772F03874D";
  const contractABI = abi.abi;

  // Recogemos el adn del zombi y actualizamos nuestra imagen
 const generateZombie = (id: String, name: String, dna: String) => {
  let dnaStr = String(dna)
  // rellenamos el ADN con ceros si es menor de 16 caracteres
  while (dnaStr.length < 16)
    dnaStr = "0" + dnaStr

  let zombieDetails = {
    // los primeros 2 d√≠gitos hacen la cabeza. Tenemos 7 posibles cabezas, entonces hacemos % 7
    // para obtener un n√∫mero entre 0 - 6, despu√©s le sumamos 1 para hacerlo entre 1 - 7. Tenemos 7
    // imagenes llamadas desde "head1.png" hasta "head7.png" que cargamos en base a 
    // este n√∫mero:
    headChoice: parseInt(dnaStr.substring(0, 2)) % 7 + 1,
    // Los siguientes 2 d√≠gitos se refieren a los ojos, 11 variaciones:
    eyeChoice: parseInt(dnaStr.substring(2, 4)) % 11 + 1,
    // 6 variaciones de camisetas:
    shirtChoice: parseInt(dnaStr.substring(4, 6)) % 6 + 1,
    // los √∫ltimos 6 digitos controlas el color. Actualiza el filtro CSS: hue-rotate
    // que tiene 360 grados:
    skinColorChoice: parseInt(dnaStr.substring(6, 8)) / 100 * 360,
    eyeColorChoice: parseInt(dnaStr.substring(8, 10)) / 100 * 360,
    clothesColorChoice: parseInt(dnaStr.substring(10, 12)) / 100 * 360,
    zombieName: name,
    zombieDescription: "A Level 1 CryptoZombie",
  }
  return zombieDetails
}

  const checkIfWalletIsConnected = async () => {
    try {
      const { ethereum } = window;

      if (!ethereum) {
        console.log("Make sure you have metamask!");
        return;
      } else {
        console.log("We have the ethereum object", ethereum);
      }

      const accounts = await ethereum.request({ method: 'eth_accounts' });

      if (accounts.length !== 0) {
        const account = accounts[0];
        console.log("Found an authorized account:", account);
        setCurrentAccount(account);
      } else {
        console.log("No authorized account found")
      }
    } catch (error) {
      console.log(error);
    }
  }

    /**
* Implement your connectWallet method here
*/
const connectWallet = async () => {
  try {
    const { ethereum } = window;

    if (!ethereum) {
      alert("Get MetaMask!");
      return;
    }

    const accounts = await ethereum.request({ method: "eth_requestAccounts" });

    console.log("Connected", accounts[0]);
    setCurrentAccount(accounts[0]);
  } catch (error) {
    console.log(error)
  }
}

useEffect(() => {
  checkIfWalletIsConnected();
}, []);

const zombieFactory = async () => {
  try {
    const { ethereum } = window;

    if (ethereum) {
      const provider = new ethers.providers.Web3Provider(ethereum);
      const signer = provider.getSigner();

      const zombieFactoryContract = new ethers.Contract(contractAddress, contractABI, signer);
      zombieFactoryContract.createRandomZombie("Isaac ");

      // Escucha al evento de `NewZombie`, y actualiza la interfaz
      zombieFactoryContract.on("NewZombie", (from, to, value, event)=>{
        const { name, dna, zombieId } = event.args;
        const zombie = generateZombie(zombieId, name, dna);
        console.log(zombie);
        setZombie(zombie);
    });
      
  
    } else {
      console.log("Ethereum object doesn't exist!");
    }
  } catch (error) {
    console.log(error)
  }
}

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <h1 className={inter.className}>
          üëã Hola amigo!
        </h1>
        <button onClick={zombieFactory} className={styles.card}>
         <span>
         üßü‚Äç‚ôÄÔ∏èCreate a new zombie  <span>‚Üí</span>
         </span>
        </button>
      <p> Zombie name: {currentZombie.zombieName}</p>
      <p> Zombie descriptio: {currentZombie.zombieDescription}</p>
      <p> Gen de la Cabeza:{currentZombie.headChoice}</p>
      <p> Gen de la Ojos:{currentZombie.eyeChoice}</p>
      <p> Gen de las Camisetas:{currentZombie.shirtChoice}</p>
      <p> Gen del Color de Piel: {currentZombie.skinColorChoice}</p>
      <p> Gen del Color de Ojos:{currentZombie.eyeColorChoice}</p>
      <p> Gen del Color de la Ropa: {currentZombie.clothesColorChoice}</p>

        {/*
        * If there is no currentAccount render this button
        */}
        {!currentAccount && (
          <button  onClick={connectWallet}>
            Connect Wallet
          </button>
        )}
      </main>
    </>
  )
}

export default Home;